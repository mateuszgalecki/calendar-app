{"version":3,"sources":["Components/CreateAccount.js","Components/LogIn.js","Components/Welcome.js","Components/Day.js","Components/AddReservationScreen.js","Components/Restaurant.js","Components/UsersReservation.js","Components/YourReservations.js","Components/Month.js","Components/Calendar.js","Components/ScreenRender.js","AppFunc.js","serviceWorker.js","index.js"],"names":["CreateAccount","props","handleEmailChange","e","setState","email","target","value","handlePasswordChange","password","state","preventDefault","this","createANewAccount","className","showMe","onSubmit","handleSubmit","bind","onChange","type","placeholder","onClick","goBack","Component","LogIn","logIn","Welcome","dispatch","useDispatch","logInAction","actionsFunction","screenActions","signInAction","signIn","id","Day","data","reservations","length","forEach","res","push","date","getDate","activeClass","dateString","toString","viewDay","AddReservationScreen","setNameAction","restaurantActions","setResName","setPhoneAction","setResPhone","resName","useSelector","restaurant","resPhone","today","format","day","showClass","event","onBlur","match","alert","addReservation","selectedHourSpan","selectedTables","Restaurant","lowerValue","hourSpan","upperValue","bookingScreen","lowerAction","setLowerValue","upperAction","setUpperValue","setViewDayAction","viewDayActions","setViewDay","setTable","switchBookingScreen","setTableAsFalse","tablesArray","newTablesArray","undefined","reservation","startHour","slice","info","spots","table","duration","xah_range","min","max","step","Array","Math","floor","fill","map","x","i","Date","headerString","time_convert","num","hours","minutes","time_convert_back","str","Number","handleFocus","hoursArray","cannotSelect","console","log","goToBookingScreen","someTablesSelected","switchingScreenVar","list","onFocus","lowerHours","upperHours","blur","hour","key","resArr","tableNumberClass","upperValueInMinutes","lowerValueInMinutes","currentSpanArray","isTheTableTaken","finnishHour","includes","tableTaken","tableSelected","selectTheTable","UsersReservation","tablesString","tables","reservationDate","parse","deleteAReservation","firestoreID","YourReservations","yourReservations","style","position","top","left","fontSize","index","Month","reservationsArray","thisMonth","month","viewedDay","setViewedDay","shift","unshift","pop","dateToCheck","compareAsc","subDays","prevMonthFunction","nextMonthFunction","logOut","dataToPass","Calendar","user","activeMonthState","activeMonth","currentDate","setActiveMonthAction","dateActions","setActiveMonth","setCurrentDateAction","setCurrentDate","monthAction","formatISO","getMonth","parsedCurrentDate","parseISO","firstMonth","startOfYear","RESERVATIONS_CALENDAR_ARRAY","singleMonthArray","begginingOfMonth","startOfMonth","monthLength","getDaysInMonth","addDays","firstDay","getDay","daysToAddAtBeginning","lastDay","daysToAddAtEnd","addMonths","resDate","reservationsToPass","screen","prevMnth","currentMonth","nextMnth","ScreenRender","welcomeAction","welcome","calendarAction","calendar","showCalendar","firebase","apiKey","authDomain","projectId","db","AppFunc","setAllReservations","reservationsActions","stateTheState","setUsersReservations","stateYourReservations","setAUser","userActions","setTimeout","currentUser","collection","onSnapshot","querySnapshot","currentUsersReservations","doc","onAuthStateChanged","userrr","window","innerWidth","display","justifyContent","alignItems","height","delete","then","catch","error","name","phoneNumber","documentName","randomNum","random","concat","set","phone_number","signOut","createUserWithEmailAndPassword","errorCode","code","errorMessage","message","signInWithEmailAndPassword","Boolean","location","hostname","screenSlice","createSlice","initialState","reducers","userSlice","action","payload","unsetAUser","reservationsSlice","dateSlice","viewDaySlice","setAddReservation","restaurantSlice","screenReducer","reducer","reservationsReducer","userReducer","dateReducer","viewDayReducer","restaurantReducer","allReducer","combineReducers","store","configureStore","actionsObject","actions","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9367663d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './accountForms.scss';\r\n\r\n\r\nclass CreateAccount extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.createANewAccount(this.state.email, this.state.password);\r\n        // this.props.showCalendar();\r\n    }\r\n\r\n    handleEmailChange = (e) => {\r\n        this.setState({\r\n            email: e.target.value\r\n        })\r\n    }\r\n    \r\n    handlePasswordChange = (e) => {\r\n        this.setState({\r\n            password: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <section className={this.props.showMe === 'signIn' ? 'onTheLeft fullScreen primaryView slideLeft' : 'onTheLeft fullScreen primaryView hideMe'}>\r\n                <form className='primaryView' onSubmit={this.handleSubmit.bind(this)}>\r\n                    <input onChange={this.handleEmailChange} value={this.state.email} type='email' placeholder='email'></input>\r\n                    <input onChange={this.handlePasswordChange} value={this.state.password} type='text' placeholder='password' className='pushUp'></input>\r\n                    <input type='submit' value='create a new account' className='pushUp add_res_button'></input>\r\n                </form>\r\n                <button className='back_button' onClick={this.props.goBack}>back</button>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateAccount;","import React, { Component } from 'react';\r\nimport './accountForms.scss';\r\n\r\nclass LogIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.logIn(this.state.email, this.state.password);\r\n    }\r\n\r\n    handleEmailChange = (e) => {\r\n        this.setState({\r\n            email: e.target.value\r\n        })\r\n    }\r\n    \r\n    handlePasswordChange = (e) => {\r\n        this.setState({\r\n            password: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <section className={this.props.showMe === 'logIn' ? 'onTheLeft fullScreen primaryView slideRight' : 'onTheLeft fullScreen primaryView'}>\r\n                <form className='primaryView' onSubmit={this.handleSubmit.bind(this)}>\r\n                    <input onChange={this.handleEmailChange} value={this.state.email} type='email' placeholder='email'></input>\r\n                    <input onChange={this.handlePasswordChange} value={this.state.password} type='text' placeholder='password' className='pushUp'></input>\r\n                    <input type='submit' value='log in' className='pushUp add_res_button'></input>\r\n                </form>\r\n                <button className='back_button' onClick={this.props.goBack}>back</button>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LogIn;","import React from 'react';\r\nimport { actionsFunction } from '../index';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport default function Welcome() {\r\n    \r\n    const dispatch = useDispatch();\r\n    const logInAction = actionsFunction().screenActions.logIn;\r\n    const signInAction = actionsFunction().screenActions.signIn;\r\n    \r\n\r\n    return(\r\n        <section className='fullScreen primaryView' id='trytry'>\r\n            <h1 className='welcome_header'>Welcome to our restaurant calendar!</h1>\r\n            <button className='add_res_button' onClick={ () => {dispatch(logInAction())}}>log in</button>\r\n            <button className='add_res_button' onClick={ () => {dispatch(signInAction())}}>sign in</button>\r\n            <div className='positioning_div'></div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport './month.scss';\r\nimport { getDate } from 'date-fns';\r\n\r\nfunction Day(props) {\r\n\r\n    const data = props.data;\r\n    let reservations = [];\r\n    \r\n    if (data[1].length > 0) {\r\n        data[1].forEach(res => {\r\n            reservations.push(res);\r\n        })\r\n    }\r\n\r\n    let date = getDate(data[0]);\r\n    let activeClass = 'activeDay';\r\n    \r\n    if (!(date > 0)) {\r\n        date = '';\r\n        activeClass = 'passiveDay'\r\n    }\r\n\r\n    // console.log(data[0].toString())\r\n    let dateString = data[0].toString();\r\n\r\n    const doTheFuckingThing = function() {\r\n        // console.log('sdfdf');\r\n        props.viewDay(dateString, data[0]);\r\n    }\r\n\r\n    return(\r\n        <div onClick={() => {if (activeClass === 'activeDay') {\r\n            doTheFuckingThing()\r\n        }}}\r\n         className={'Day ' + activeClass}>\r\n            {date}\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default Day;","import React from 'react';\r\nimport './addAReservation.scss';\r\nimport { format } from 'date-fns';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionsFunction } from '../index';\r\n\r\nconst AddReservationScreen = function(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const setNameAction = actionsFunction().restaurantActions.setResName;\r\n    const setPhoneAction = actionsFunction().restaurantActions.setResPhone;\r\n    let resName = useSelector(state => state.restaurant).resName;\r\n    let resPhone = useSelector(state => state.restaurant).resPhone;\r\n\r\n    let today = format(props.day, \"EEEE', the ' do ' of ' LLLL ' ' y\");\r\n    \r\n\r\n    const nameBlur = function(event) {\r\n\r\n        let letters = /^[A-Za-z]+$/;\r\n\r\n        let userName = event.target.value;\r\n        if (!userName.match(letters)) {\r\n            event.target.value = '';\r\n            alert('for the name, please use letters only');\r\n        }\r\n    }\r\n\r\n    const phoneBlur = function(event) {\r\n\r\n        let numbers = /^[+-]?\\d+$/;\r\n\r\n        let userName = event.target.value;\r\n        if (!userName.match(numbers)) {\r\n            event.target.value = '';\r\n            alert('for the phone number, please use numbers and plus sign only');\r\n        }\r\n    }\r\n\r\n    const nameChange = function(event) {\r\n        dispatch(setNameAction(event.target.value));\r\n    }\r\n\r\n    const phoneChange = function(event) {\r\n        dispatch(setPhoneAction(event.target.value));\r\n    }\r\n    \r\n    return(\r\n        <section className={'temporaryPin fullScreen primaryView ' + props.showClass}>\r\n            <p>Hello, You're making a reservation for {today}. For the name please use only letters and for the telephone number, please use numbers or a plus sign.</p>\r\n            <p>Your Name:</p>\r\n            <input onChange={nameChange} value={resName} onBlur={nameBlur} type='text'></input>\r\n            <p>Your telephone number:</p>\r\n            <input onChange={phoneChange} value={resPhone} onBlur={phoneBlur} type='tel'></input>\r\n            <button className='add_res_button' onClick={() => props.addReservation(props.day, props.selectedHourSpan, props.selectedTables, resName, resPhone)}>add a reservation</button>\r\n            <button className='back_button' onClick={props.goBack}>back</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AddReservationScreen;","import React from 'react';\r\nimport { format } from 'date-fns';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionsFunction } from '../index';\r\nimport AddReservationScreen from './AddReservationScreen';\r\n\r\nconst Restaurant = function(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    let lowerValue = useSelector(state => state.restaurant).hourSpan[0];\r\n    let upperValue = useSelector(state => state.restaurant).hourSpan[1];\r\n    let bookingScreen = useSelector(state => state.restaurant).bookingScreen;\r\n    const lowerAction = actionsFunction().restaurantActions.setLowerValue;\r\n    const upperAction = actionsFunction().restaurantActions.setUpperValue;\r\n    const setViewDayAction = actionsFunction().viewDayActions.setViewDay;\r\n    const setTable = actionsFunction().restaurantActions.setTable;\r\n    const switchBookingScreen = actionsFunction().restaurantActions.switchBookingScreen;\r\n    const setTableAsFalse = actionsFunction().restaurantActions.setTableAsFalse;\r\n\r\n    let tablesArray = useSelector(state => state.restaurant).tablesArray;\r\n    let newTablesArray = [[], [], [], [], [], [], [], [], [], []];\r\n\r\n    if (props.data[0] !== undefined) {\r\n        props.data.forEach(reservation => {\r\n            let startHour = reservation.date.slice(11, 16)\r\n            reservation.info.spots.forEach(table => {\r\n                newTablesArray[table - 1].push([startHour, reservation.info.duration])\r\n            })\r\n        })\r\n    }\r\n\r\n    //A function to make a range array with a certain step value\r\n    const xah_range = ((min, max, step = 1) => (Array(Math.floor((max - min)/step) + 1).fill(min).map ( ((x, i) => ( x + i * step )) )));\r\n    \r\n    let day = new Date(props.day);\r\n    let headerString = format(day, 'EEEE, do LLLL yyyy');\r\n\r\n    //Time convert functions for inputs values handling\r\n\r\n    function time_convert(num){ \r\n        let hours = Math.floor(num / 60); \r\n        let minutes = num % 60;\r\n        if (minutes === 0) {\r\n            minutes = '00';\r\n        }\r\n        if (hours.toString().length === 1) {\r\n            hours = '0' + hours.toString();\r\n        }\r\n        return hours + \":\" + minutes;         \r\n    }\r\n\r\n    function time_convert_back(str) {\r\n        let hours = Number(str.slice(0, 2));\r\n        let halfHours = Number(str.slice(3, 5));\r\n        return hours * 60 + halfHours;\r\n    }\r\n\r\n    //Handling inputs\r\n\r\n    const handleLowerChange = function(event) {\r\n        dispatch(lowerAction(event.target.value));\r\n        let lowerHours = time_convert_back(event.target.value);\r\n        let upperHours = time_convert_back(upperValue);\r\n        if (upperHours - lowerHours < 120) {\r\n            dispatch(lowerAction(time_convert(upperHours - 120)))\r\n        }\r\n        event.target.blur();\r\n    }\r\n\r\n    const handleUpperChange = function(event) {\r\n        dispatch(upperAction(event.target.value));\r\n        let lowerHours = time_convert_back(lowerValue);\r\n        let upperHours = time_convert_back(event.target.value);\r\n        if (upperHours - lowerHours < 120) {\r\n            dispatch(upperAction(time_convert(lowerHours + 120)))\r\n        }\r\n        event.target.blur();\r\n    }\r\n\r\n    const handleFocus = function(event) {\r\n        event.target.value = '';\r\n    }\r\n\r\n    //Making a list of hours for hour inputs\r\n\r\n    let hoursArray = [];\r\n\r\n    for (let i = 480; i <= 1320; i = i + 30) {\r\n        hoursArray.push(time_convert(i));\r\n    }\r\n\r\n    \r\n\r\n    //Back to month function\r\n\r\n    const backToMonth = function() {\r\n        dispatch(setViewDayAction('hide'));\r\n    }\r\n\r\n    //Tables selection fns\r\n\r\n    const selectTheTable = function(key) {\r\n        dispatch(setTable(key));\r\n    }\r\n\r\n    const cannotSelect = function() {\r\n        console.log('taken');\r\n    }\r\n\r\n    //Go to booking screen fn\r\n\r\n    const goToBookingScreen = function() {\r\n        let someTablesSelected = false;\r\n        tablesArray.forEach(table => {\r\n            if (table) {someTablesSelected = true};\r\n        })\r\n        if (someTablesSelected) {dispatch(switchBookingScreen())}\r\n    }\r\n\r\n    let switchingScreenVar = bookingScreen ? ' hideMe' : '';\r\n\r\n    return(\r\n    <div>\r\n        <section className={'restaurantView center primaryView fullScreen' + switchingScreenVar}>\r\n            <p>{headerString}</p><br/>\r\n            <p>Choose the hour, select the tables that You want to book and click \"add a reservation\" button. If the tables are red, it means, that they're taken in the given hour span. Keep in mind, that the reservation must last at least two hours (and You won't be able to choose a smaller hour span). You have to select at least one table.</p><br/>\r\n            <input type='text' list='hours' value={lowerValue} onFocus={handleFocus} onChange={handleLowerChange}/>\r\n            <input type='text' list='hours' value={upperValue} onFocus={handleFocus} onChange={handleUpperChange}/>\r\n            <datalist id='hours'>\r\n                {hoursArray.map((hour, key) => {\r\n                    return <option key={key} value={hour}/>\r\n                })}\r\n            </datalist>\r\n            <div className='Restaurant'>\r\n                {newTablesArray.map((resArr, key) => {\r\n                    let tableNumberClass = 'table' + (key + 1);\r\n                    let upperValueInMinutes = time_convert_back(upperValue)\r\n                    let lowerValueInMinutes = time_convert_back(lowerValue)\r\n                    let currentSpanArray = xah_range(lowerValueInMinutes, upperValueInMinutes, 30);\r\n                    let isTheTableTaken = false;\r\n                    resArr.forEach(res => {\r\n                        let startHour = time_convert_back(res[0]) + 30;\r\n                        let finnishHour = startHour + res[1] * 60 - 60;\r\n                        let reservationSpan = xah_range(startHour, finnishHour, 30);\r\n                        reservationSpan.forEach(hour => {\r\n                            if (currentSpanArray.includes(hour)) {\r\n                                isTheTableTaken = true;\r\n                            }\r\n                        })\r\n                    })\r\n                    let tableTaken = '';\r\n                    let tableSelected = '';\r\n                    if (!isTheTableTaken) {\r\n                        tablesArray[key] ? tableSelected = 'selected' : tableSelected = '';\r\n                        tableTaken = '';\r\n                    } else {\r\n                        tableTaken = 'taken';\r\n                        dispatch(setTableAsFalse(key));\r\n                    }\r\n                    return <div onClick={isTheTableTaken ? cannotSelect : () => selectTheTable(key)} key={key} className={'table ' + tableNumberClass + ' ' + tableTaken + '' + tableSelected}>{key + 1}</div>\r\n                })}\r\n            </div>\r\n            <button className='back_button' onClick={backToMonth}>back</button>\r\n            <button className='add_res_button' onClick={goToBookingScreen}>add a reservation</button>\r\n        </section>\r\n        <AddReservationScreen addReservation={props.addReservation} selectedTables={tablesArray} selectedHourSpan={[lowerValue, (time_convert_back(upperValue) - time_convert_back(lowerValue)) / 60]} goBack={goToBookingScreen} showClass={bookingScreen ? '' : 'hideMe'} day={day}/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Restaurant;","import React from 'react';\r\nimport { parse, format } from 'date-fns';\r\n\r\nconst UsersReservation = function(props) {\r\n\r\n    let tablesString = props.tables.map(table => {return ` ${table}`}).toString();\r\n    const reservationDate = parse(props.date, \"yyyy-MM-dd'T'HH:mm:ss\", new Date())\r\n    let today = format(reservationDate, \"do ' of ' LLLL\");\r\n\r\n    // EEEE', the ' \r\n    // ' ' y\r\n\r\n    const deleteThisReservation = function() {\r\n        props.deleteAReservation(props.firestoreID);\r\n    }\r\n\r\n    return(\r\n        <div className='users_reservation'>\r\n            <div>\r\n                <p>{today}</p>\r\n                <p>Tables: {tablesString}</p>\r\n            </div>\r\n            <button onClick={deleteThisReservation}>X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersReservation;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionsFunction } from '../index';\r\nimport UsersReservation from './UsersReservation';\r\nimport './yourReservations.scss';\r\n\r\nconst YourReservations = function(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const setViewDayAction = actionsFunction().viewDayActions.setViewDay;\r\n    let yourReservations = useSelector(state => state.reservations).yourReservations;\r\n\r\n    const backToMonth = function() {\r\n        dispatch(setViewDayAction('hide'));\r\n    }\r\n\r\n    return(\r\n        <section className='your_reservations primaryView fullScreen'>\r\n            <p style={{\r\n                position: 'fixed',\r\n                top: '30px',\r\n                left: '30px',\r\n                fontSize: '1.6rem'\r\n            }}>my reservations:</p>\r\n            {yourReservations.map((reservation, index) => {\r\n                return <UsersReservation deleteAReservation={props.deleteAReservation} key={index} firestoreID={reservation.firestoreID} date={reservation.date} tables={reservation.info.spots}/>\r\n            })}\r\n            <button className='back_button' onClick={backToMonth}>back</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default YourReservations;","import React from 'react';\r\nimport Day from './Day';\r\nimport './month.scss';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionsFunction } from '../index';\r\nimport Restaurant from './Restaurant';\r\nimport YourReservations from './YourReservations';\r\nimport { compareAsc, subDays } from 'date-fns';\r\n\r\nfunction Month(props) {\r\n    let reservationsArray = props.reservations;\r\n    let monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    let thisMonth = props.month;\r\n    const dispatch = useDispatch();\r\n    let viewedDay = useSelector(state => state.viewDay).value;\r\n    const setViewedDay = actionsFunction().viewDayActions.setViewDay;\r\n\r\n    \r\n    if (reservationsArray[0] !== undefined && reservationsArray !== undefined) {\r\n        if (reservationsArray[0][0][0] === 0) {\r\n            reservationsArray.shift();\r\n        } else {\r\n            for (let i = reservationsArray[0][0][0] - 1; i > 0; i--) {\r\n                reservationsArray.unshift([[], []]);\r\n            }\r\n        }\r\n        if (reservationsArray[reservationsArray.length - 1][0][0] === 0) {\r\n            reservationsArray.pop();\r\n        } else {\r\n            for (let i = reservationsArray[reservationsArray.length - 1][0][0]; i > 1; i--) {\r\n                reservationsArray.push([[], []]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const viewDay = function(date, dateToCheck) {\r\n        let areYouMakingAReservationInThePast = compareAsc(dateToCheck, subDays(new Date(), 1));\r\n        if (areYouMakingAReservationInThePast < 0) {\r\n            alert(\"dont't make the reservation in the past\");\r\n        } else {\r\n            dispatch(setViewedDay(date));\r\n        }\r\n\r\n    }\r\n\r\n    const viewYourReservations = function() {\r\n        dispatch(setViewedDay('yourReservations'));\r\n    }\r\n\r\n    const logOut = function() {\r\n        props.logOut();\r\n    }\r\n\r\n\r\n    if (viewedDay === 'hide') {\r\n        return(\r\n        <section className='Month fullScreen primaryView'>\r\n            <div className='month'>\r\n                <div className='monthName'>\r\n                    <button onClick={props.prevMonthFunction} className='changeMonthBtn prevMonthBtn'>prev</button>\r\n                    {monthNames[thisMonth]}\r\n                    <button onClick={props.nextMonthFunction} className='changeMonthBtn nextMonthBtn'>next</button>\r\n                </div>\r\n                <div className='monthHeader'>\r\n                    <div className='dayName'>MON</div>\r\n                    <div className='dayName'>TU</div>\r\n                    <div className='dayName'>WED</div>\r\n                    <div className='dayName'>THU</div>\r\n                    <div className='dayName'>FR</div>\r\n                    <div className='dayName'>SAT</div>\r\n                    <div className='dayName'>SUN</div>\r\n                </div>\r\n                {\r\n                    reservationsArray.map((day, index) => {\r\n                        return <Day key={index} viewDay={viewDay} data={day}/>\r\n                    })\r\n                }\r\n            </div>\r\n            <button className='back_button' onClick={logOut}>log out</button>\r\n            <button className='add_res_button' onClick={viewYourReservations}>go to Your reservations</button>\r\n        </section>\r\n    )\r\n    } else if (viewedDay === 'yourReservations') {\r\n        return(\r\n            <YourReservations deleteAReservation={props.deleteAReservation}/>\r\n        )\r\n    } else {\r\n        let dataToPass = [];\r\n        reservationsArray.forEach(day => {\r\n            if (day[0].toString() === viewedDay) {\r\n                dataToPass = day[1];\r\n            }\r\n        })\r\n\r\n        return(\r\n            <Restaurant addReservation={props.addReservation} day={viewedDay} data={dataToPass}/>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default Month;","import React from 'react';\r\nimport './calendar.scss';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionsFunction } from '../index';\r\nimport Month from './Month';\r\nimport { startOfYear, formatISO, parse, addDays, getDate, getMonth, getDay, startOfMonth, addMonths, getDaysInMonth, parseISO } from 'date-fns';\r\n\r\n\r\n\r\nfunction Calendar(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    let user = useSelector(state => state.user);\r\n    let reservations = useSelector(state => state.reservations).reservations;\r\n    let activeMonthState = useSelector(state => state.date).activeMonth;\r\n    let currentDate = useSelector(state => state.date).currentDate;\r\n    const setActiveMonthAction = actionsFunction().dateActions.setActiveMonth;\r\n    const setCurrentDateAction = actionsFunction().dateActions.setCurrentDate;\r\n    const monthAction = actionsFunction().screenActions.month;\r\n\r\n    //SETTING AN ACTIVE MONTH FOR THE FIRST TIME\r\n    if (currentDate === '') {\r\n        let activeMonth = formatISO(new Date());        \r\n        dispatch(setCurrentDateAction(activeMonth));\r\n        dispatch(setActiveMonthAction(getMonth(new Date())));\r\n    }\r\n\r\n\r\n\r\n    //MAKING A RESERVATIONS-CALENDAR ARRAY\r\n\r\n    let parsedCurrentDate = parseISO(currentDate);\r\n    let firstMonth = startOfYear(parsedCurrentDate);\r\n    let RESERVATIONS_CALENDAR_ARRAY = [];\r\n    \r\n    \r\n    for (let i = 0; i < 12; i++) {\r\n\r\n        let singleMonthArray = [];\r\n        let begginingOfMonth = startOfMonth(firstMonth);\r\n        let monthLength = getDaysInMonth(firstMonth);\r\n        for (let i = 0; i < monthLength; i++) {\r\n            singleMonthArray.push([begginingOfMonth, []]);\r\n            begginingOfMonth = addDays(begginingOfMonth, 1);\r\n        }\r\n\r\n        \r\n        \r\n        if (singleMonthArray[0] !== undefined) {\r\n            let firstDay = getDay(singleMonthArray[0][0]);\r\n            let daysToAddAtBeginning = 0;\r\n            if (firstDay === 0) {\r\n                daysToAddAtBeginning = 6;\r\n            } else {\r\n                daysToAddAtBeginning = firstDay - 1;\r\n            }\r\n            singleMonthArray.unshift([[daysToAddAtBeginning], []]);\r\n            \r\n\r\n            let lastDay = getDay(singleMonthArray[singleMonthArray.length - 1][0]);\r\n            let daysToAddAtEnd = 0;\r\n            if (lastDay === 0) {\r\n                daysToAddAtEnd = 0;\r\n            } else {\r\n                daysToAddAtEnd = 7 - lastDay\r\n            }\r\n            singleMonthArray.push([[daysToAddAtEnd], []]);\r\n        }\r\n        \r\n        \r\n\r\n\r\n        RESERVATIONS_CALENDAR_ARRAY.push(singleMonthArray);\r\n        firstMonth = addMonths(firstMonth, 1);\r\n    }\r\n\r\n\r\n    if (reservations.length !== 0) {\r\n        reservations.forEach(res => {\r\n            const resDate = parse(res.date, \"yyyy-MM-dd'T'HH:mm:ss\", new Date());\r\n            const day = getDate(resDate);\r\n            const month = getMonth(resDate);\r\n            if (RESERVATIONS_CALENDAR_ARRAY[month][day] !== undefined) {\r\n                RESERVATIONS_CALENDAR_ARRAY[month][day][1].push(res);\r\n            }\r\n        })\r\n        \r\n    };\r\n\r\n    const nextMonth = function() {\r\n        let nextMnth = activeMonthState + 1;\r\n        if (activeMonthState === 11) {\r\n            // nextMnth = 0;\r\n            alert('you can only make reservations for the current year');\r\n        } else {\r\n            dispatch(setActiveMonthAction(nextMnth));\r\n        }\r\n    }\r\n\r\n    const prevMonth = function() {\r\n        let prevMnth = activeMonthState - 1;\r\n        let currentMonth = getMonth(new Date());\r\n        if (activeMonthState === 0) {\r\n            // prevMnth = 11;\r\n            alert('you can only make reservations for the current year');\r\n        } else if ( prevMnth < currentMonth ) {\r\n            alert('you cannot make a reservation back in time!')\r\n        } else {\r\n            dispatch(setActiveMonthAction(prevMnth));\r\n        }\r\n    }\r\n    \r\n\r\n    let reservationsToPass = RESERVATIONS_CALENDAR_ARRAY[activeMonthState];\r\n\r\n\r\n    if (user.email === \"no_user\") {\r\n        return(\r\n            <div className={'fullScreen primaryView'}>\r\n                <div className={'loading'}> LOADING </div>\r\n            </div>\r\n        )\r\n    } else if (props.screen === 'calendar_month') {\r\n        return (\r\n            <Month  deleteAReservation={props.deleteAReservation} addReservation={props.addReservation} logOut={props.logOut} prevMonthFunction={prevMonth} nextMonthFunction={nextMonth} month={activeMonthState} reservations={reservationsToPass}/>\r\n        )\r\n    } else {\r\n        return(\r\n        <section className='Calendar fullScreen primaryView'>\r\n            <h1>RESTAURANT CALENDAR</h1>\r\n            <p>Welcome to our restaurant calendar, {user.email}.</p>\r\n            {/* <p>You can make a reservation for 20 people tops. If you want to make a bigger one, please call us at +48 888 888 888.</p> */}\r\n            <p>Click on the day that You want to make the reservation on. Choose the tables You'd like to book and click the \"add reservation button\". To specify the menu You'd like to order, please call us.</p>\r\n            <p>We'll make everything to make Your visit at our restaurant pleasurable!</p>\r\n            <p>Cheers,</p>\r\n            <p>RESTAURANT'S crew.</p>\r\n            <button onClick={() => dispatch(monthAction())} className={'goToCurrentMonthBtn primary_button'}>go to the current month</button>\r\n        </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Calendar;","import React from 'react';\r\nimport CreateAccount from './CreateAccount';\r\nimport LogIn from './LogIn';\r\nimport Welcome from './Welcome';\r\nimport Calendar from './Calendar';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionsFunction } from '../index';\r\n\r\n\r\n\r\nfunction ScreenRender(props) {\r\n\r\n    let screen = useSelector(state => state.screen);\r\n    const dispatch = useDispatch();\r\n    const welcomeAction = actionsFunction().screenActions.welcome;\r\n    const calendarAction = actionsFunction().screenActions.calendar;\r\n\r\n    const goBack = function(event) {\r\n        dispatch(welcomeAction());\r\n        console.log('go back');\r\n    }\r\n\r\n    const showCalendar = () => {\r\n        dispatch(calendarAction());\r\n        console.log('hello, calendar');\r\n    }\r\n\r\n    if (screen.includes('calendar')) {\r\n        return(\r\n            <div>\r\n                <Calendar deleteAReservation={props.deleteAReservation} addReservation={props.addReservation} logOut={props.logOut} screen={screen}/>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n        <div>\r\n            {/* <Welcome/> */}\r\n            <div>\r\n                <LogIn showCalendar={showCalendar} goBack={goBack} showMe={screen} logIn={props.logIn}/>\r\n                <CreateAccount showCalendar={showCalendar} goBack={goBack} showMe={screen} createANewAccount={props.createANewAccount}/>\r\n            </div>\r\n            <Welcome/>\r\n        </div>\r\n    )\r\n\r\n    }\r\n}\r\n\r\nexport default ScreenRender;","\r\n//<REACT\r\nimport React from 'react';\r\nimport ScreenRender from './Components/ScreenRender';\r\n//REACT/>\r\n\r\n//<REDUX\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionsFunction } from './index';\r\n//REDUX/>\r\n\r\n//<DATE-FNS\r\nimport { format } from 'date-fns';\r\n//DATE-FNS/>\r\n\r\n//<FIREBASE\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/analytics\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nfirebase.initializeApp({\r\n  apiKey: 'AIzaSyAFE5YT_p3JiDo6rHenm792Ho8dpCzoyOU',\r\n  authDomain: 'restaurant-calendar-2fd31.firebaseapp.com',\r\n  projectId: 'restaurant-calendar-2fd31'\r\n});\r\n\r\nconst db = firebase.firestore();\r\n//FIREBASE/>\r\n\r\n\r\n\r\n//APP COMPONENT\r\n\r\n\r\nconst AppFunc = function() {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    let user = useSelector(state => state.user);\r\n    const setAllReservations = actionsFunction().reservationsActions.stateTheState;\r\n    const setUsersReservations = actionsFunction().reservationsActions.stateYourReservations;\r\n    const setAUser = actionsFunction().userActions.setAUser;\r\n    const calendarAction = actionsFunction().screenActions.calendar;\r\n    const welcomeAction = actionsFunction().screenActions.welcome;\r\n    const switchBookingScreen = actionsFunction().restaurantActions.switchBookingScreen;\r\n\r\n\r\n    //FUNCTION TO SHOW THE CALENDAR SCREEN\r\n    const showCalendar = () => {\r\n      dispatch(calendarAction());\r\n      let checkIfLoggedIn = setTimeout(() => {\r\n        let firebaseUser = firebase.auth().currentUser\r\n        if (!firebaseUser) {\r\n            dispatch(welcomeAction());\r\n        } else {\r\n            console.log('user succesfully logged and will stay that way');\r\n        }\r\n      }, 5000);\r\n  }\r\n\r\n\r\n\r\n\r\n    //TRY TO GET THE DATA WITH A SNAPSHOT METHOD INSTEAD OF 'GET()'\r\n    db.collection('reservations').onSnapshot(function(querySnapshot) {\r\n    let reservations = [];\r\n    let currentUsersReservations = [];\r\n      querySnapshot.forEach((doc) => {\r\n          let date = doc.id.slice(0, 19);\r\n          let reservation = {\r\n              date: date,\r\n              info: doc.data(),\r\n              firestoreID: doc.id\r\n      }\r\n      if (reservation.info.user === user.email) {\r\n        currentUsersReservations.push(reservation);\r\n      }\r\n      reservations.push(reservation);\r\n    })\r\n    dispatch(setUsersReservations(currentUsersReservations));\r\n    dispatch(setAllReservations(reservations));\r\n    });\r\n\r\n    //ADDING A NEW RESERVATION IN FIRESTORE\r\n    \r\n    const addReservation = function(date, hourSpan, tables, name, phoneNumber) {\r\n\r\n      let documentName = format(date, \"y-MM-dd\") + \"T\" + hourSpan[0] + \":00\";\r\n      let randomNum = Math.random()*1000;\r\n      documentName = documentName.concat(randomNum);\r\n\r\n      let tablesArray = [];\r\n\r\n      tables.forEach((table, i) => {\r\n          if (table) {\r\n              tablesArray.push(i + 1);\r\n          }\r\n      });\r\n      \r\n      db.collection(\"reservations\").doc(documentName).set({\r\n        duration: hourSpan[1],\r\n        name: name,\r\n        phone_number: phoneNumber,\r\n        spots: tablesArray,\r\n        user: user.email\r\n      })\r\n      .then(function() {\r\n        alert(\"reservation succesfully added\");\r\n        dispatch(switchBookingScreen());\r\n      })\r\n      .catch(function(error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n    }\r\n\r\n    //DELETING A RESERVATION\r\n    \r\n    const deleteAReservation = function(date) {\r\n\r\n      db.collection(\"reservations\").doc(date).delete().then(function() {\r\n        console.log(\"Document successfully deleted!\");\r\n      }).catch(function(error) {\r\n        console.error(\"Error removing document: \", error);\r\n      });\r\n    \r\n    }\r\n\r\n    //SETTIN A LISTENER ON THE AUTH OBJECT TO MONITOR IF A USER IS LOGGED IN\r\n    firebase.auth().onAuthStateChanged((userrr) => {\r\n        if (userrr) {\r\n          // user.email = userrr.email;\r\n          dispatch(setAUser(userrr.email));\r\n        } else {\r\n          console.log('woooooooooo');\r\n          // dispatch(unsetAUser());\r\n        }\r\n    });\r\n\r\n    // HANDLING LOGGING IN\r\n    const logIn = (email, password) => {\r\n        firebase.auth().signInWithEmailAndPassword(email, password).catch(function(error) {\r\n          let errorCode = error.code;\r\n          console.log(errorCode);\r\n          //auth/user-not-found\r\n          if (errorCode === 'auth/user-not-found') {\r\n            alert('user does not exist');\r\n          }\r\n        });\r\n        showCalendar();\r\n    }\r\n    \r\n    //HANDLING CREATING A NEW ACCOUNT\r\n    const createANewAccount = (email, password) => {\r\n        firebase.auth().createUserWithEmailAndPassword(email, password).catch(function(error) {\r\n          let errorCode = error.code;\r\n          let errorMessage = error.message;\r\n          console.log(errorCode, errorMessage);\r\n        });\r\n        showCalendar();\r\n    }\r\n\r\n    //HANDLING LOGGING OUT\r\n    const logOut = () => {\r\n      firebase.auth().signOut().then(function() {\r\n        dispatch(welcomeAction())\r\n        dispatch(setAUser(\"no_user\"));\r\n        console.log('i log outtttttt')\r\n      }).catch(function(error) {\r\n        console.log(error);\r\n      });\r\n    }\r\n\r\n    let intViewportWidth = window.innerWidth;\r\n\r\n    if (intViewportWidth > 500) {\r\n      return(\r\n        <div style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          height: '100vh'\r\n        }}>\r\n          <p>\r\n            Please, view this app via a mobile device simulation. :)\r\n          </p>\r\n        </div>\r\n      )\r\n    } else {\r\n      return(\r\n    <div className=\"App\">\r\n        <ScreenRender deleteAReservation={deleteAReservation} addReservation={addReservation} logOut={logOut} showCalendar={showCalendar} createANewAccount={createANewAccount} logIn={logIn}/>\r\n    </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AppFunc;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n// import App from './App';\nimport AppFunc from './AppFunc';\nimport * as serviceWorker from './serviceWorker';\n\n//REDUX - GENERATING ALL THE SLICES (REDUCERS)\nimport { createSlice } from '@reduxjs/toolkit';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { Provider } from 'react-redux';\nimport { combineReducers } from 'redux';\n\n\nconst screenSlice = createSlice({\n    name: 'screen',\n    initialState: 'welcome',\n    reducers: {\n      welcome: state => state = 'welcome',\n      logIn: state => state = 'logIn',\n      signIn: state => state = 'signIn',\n      calendar: state => state = 'calendar',\n      month: state => state = 'calendar_month'\n    }\n});\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState: { email: \"no_user\" },\n    reducers: {\n        setAUser: (state, action) => {\n          state.email = action.payload;\n        },\n        unsetAUser: (state) => {\n            state.email = '';\n        }\n      }\n})\n\nconst reservationsSlice = createSlice({\n    name: 'reservations',\n    initialState: { \n      reservations: [],\n      yourReservations: []\n    },\n    reducers: {\n        stateTheState: (state, action) => {\n          state.reservations = action.payload;\n        },\n        stateYourReservations: (state, action) => {\n          state.yourReservations = action.payload;\n        }\n      }\n})\n\nconst dateSlice = createSlice({\n  name: 'date',\n  initialState: {\n    currentDate: '',\n    activeMonth: 0\n  },\n  reducers: {\n    setActiveMonth: (state, action) => {\n      state.activeMonth = action.payload\n    },\n    setCurrentDate: (state, action) => {\n      state.currentDate = action.payload\n    }\n  }\n})\n\nconst viewDaySlice = createSlice({\n  name: 'viewDay',\n  initialState: {\n    value: 'hide',\n    addReservation: false\n  },\n  reducers: {\n    setViewDay: (state, action) => {\n      state.value = action.payload\n    },\n    setAddReservation: (state) => {\n      state.addReservation = !state.addReservation\n    }\n  }\n})\n\n//Sun Jan 12 2020 00:00:00 GMT+0100 (czas środkowoeuropejski standardowy)\n\nconst restaurantSlice = createSlice({\n  name: 'restaurant',\n  initialState: {\n    tablesArray: [false, false, false, false, false, false, false, false, false, false],\n    hourSpan: ['08:00', '22:00'],\n    bookingScreen: false,\n    resName: '',\n    resPhone: '',\n  },\n  reducers: {\n    setTable: (state, action) => {\n      state.tablesArray[action.payload] = !state.tablesArray[action.payload];\n    },\n    switchBookingScreen: (state) => {\n      state.bookingScreen = !state.bookingScreen;\n    },\n    setTableAsFalse: (state, action) => {\n      state.tablesArray[action.payload] = false;\n    },\n    setLowerValue: (state, action) => {\n      state.hourSpan[0] = action.payload;\n    },\n    setUpperValue: (state, action) => {\n      state.hourSpan[1] = action.payload;\n    },\n    setResName: (state, action) => {\n      state.resName = action.payload;\n    },\n    setResPhone: (state, action) => {\n      state.resPhone = action.payload;\n    }\n  }\n})\n\n\n//REDUX - MAKING AN ALLREDUCER\n\nconst screenReducer = screenSlice.reducer;\nconst reservationsReducer = reservationsSlice.reducer;\nconst userReducer = userSlice.reducer;\nconst dateReducer = dateSlice.reducer;\nconst viewDayReducer = viewDaySlice.reducer;\nconst restaurantReducer = restaurantSlice.reducer;\n\nconst allReducer = combineReducers({\n    screen: screenReducer,\n    reservations: reservationsReducer,\n    user: userReducer,\n    date: dateReducer,\n    viewDay: viewDayReducer,\n    restaurant: restaurantReducer\n})\n\n\n//REDUX - STORE PLUS ALL THE ACTIONS TO EXPORT\n\nconst store = configureStore({\n    reducer: allReducer\n})\n\nconst actionsObject = {\n    screenActions: screenSlice.actions,\n    reservationsActions: reservationsSlice.actions,\n    userActions: userSlice.actions,\n    dateActions: dateSlice.actions,\n    viewDayActions: viewDaySlice.actions,\n    restaurantActions: restaurantSlice.actions\n}\n\n\n//STARTING THE REACT RENDER\nReactDOM.render(<Provider store={store}>\n    <AppFunc />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n//EXPORTING ALL THE ACTIONS FOR FURTHER USE\n\nexport function actionsFunction() {\n    return actionsObject\n};"],"sourceRoot":""}